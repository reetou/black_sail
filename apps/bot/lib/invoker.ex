defmodule Bot.Invoker.Split do
  @moduledoc """
  An `OptionParser.split/1`-based command processor.
  This parser supports a single prefix configured via the `nosedrum.prefix`
  configuration variable:
      config :nosedrum,
        prefix: "!"
  The default prefix is `.`, and the prefix are looked up at compilation time
  due to the nature of Elixir's binary matching. This means that if you change
  your prefix, you need to recompile this module, usually using
  `mix deps.compile --force nosedrum`.
  This invoker checks predicates and reports errors
  directly in the channel in which they were caused.
  """

  @behaviour Nosedrum.Invoker

  # This must be looked up at compilation time due to the nature of Elixir's
  # binary matching. Also, SPEEEEEEEEEEEEEED!!
  @prefix Application.get_env(:nosedrum, :prefix, "!")

  alias Nosedrum.{Helpers, Predicates}
  alias Nostrum.Api
  alias Nostrum.Struct.Message
  alias Bot.Helpers, as: BotHelpers

  @doc """
  Handle the given message.
  This involves checking whether the message starts with the given prefix, splitting
  the message into command and arguments, looking up a candidate command, and finally
  resolving it and invoking the module.
  ## Arguments
  - `message`: The message to handle.
  - `storage`: The storage implementation the command invoker should use.
  - `storage_process`: The storage process, ETS table, or similar that is used by
    the storage process. For instance, this allows you to use different ETS tables
    for the `Nosedrum.Storage.ETS` module if you wish.
  ## Return value
  Returns `:ignored` if one of the following applies:
  - The message does not start with the configured prefix.
  - The message only contains the configured prefix.
  - No command could be looked up that matches the command the message invokes.
  ## Examples
      iex> Nosedrum.Invoker.Split.handle_message(%{content: "foo"})
      :ignored
      iex> Nosedrum.Invoker.Split.handle_message(%{content: "."})
      :ignored
  """
  @spec handle_message(Message.t(), Module.t(), atom() | pid()) :: :ignored | any()
  def handle_message(
        message,
        storage \\ Nosedrum.Storage.ETS,
        storage_process \\ :nosedrum_commands
      ) do
    unless message.guild_id == nil do
      # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ –≤ –ª–∏—á–∫—É, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      Task.start(fn ->
        Api.delete_message(message.channel_id, message.id)
      end)
    end
    with @prefix <> content <- message.content,
         [command | args] <- Helpers.quoted_split(content)
                             |> IO.inspect(label: "Quoted split"),
         cog when cog != nil <- storage.lookup_command(command, storage_process) do
      handle_command(cog, message, args)
    else
      _mismatch -> :ignored
    end
  end

  @spec parse_args(Module.t(), [String.t()]) :: [String.t()] | any()
  defp parse_args(command_module, args) do
    if function_exported?(command_module, :parse_args, 1) do
      command_module.parse_args(args)
    else
      args
    end
  end

  @spec invoke(Module.t(), Message.t(), [String.t()]) :: any()
  defp invoke(command_module, msg, args) do
    case Predicates.evaluate(msg, command_module.predicates()) do
      :passthrough ->
        command_module.command(msg, parse_args(command_module, args))
      {:error, reason} ->
        # a predicate failed. show the response generated by it
        unless msg.guild_id == nil do
          Task.start(fn ->
            reply = Api.create_message!(msg.channel_id, reason)
            Process.sleep(4000)
            Api.delete_message(reply.channel_id, reply.id)
          end)
        else
          Api.create_message!(msg.channel_id, reason)
        end
    end
  end

  @spec handle_command(Map.t() | Module.t(), Message.t(), [String.t()]) ::
          :ignored | {:ok, Message.t()} | any()
  defp handle_command(command_map, msg, original_args) when is_map(command_map) do
    maybe_subcommand = List.first(original_args)

    case Map.fetch(command_map, maybe_subcommand) do
      {:ok, subcommand_module} ->
        # If we have at least one subcommand, that means `original_args`
        # needs to at least contain one element, so `args` is either empty
        # or the rest of the arguments excluding the subcommand name.
        [_subcommand | args] = original_args
        invoke(subcommand_module, msg, args)

      :error ->
        # Does the command group have a default command to invoke?
        if Map.has_key?(command_map, :default) do
          # If yes, invoke it with all arguments.
          invoke(command_map.default, msg, original_args)
        else
          # Otherwise, respond with all known subcommands in the command group.
          subcommand_string =
            command_map |> Map.keys() |> Stream.map(&"`#{&1}`") |> Enum.join(", ")

          response = "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–±–∫–æ–º–∞–Ω–¥–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±–∫–æ–º–∞–Ω–¥—ã: #{subcommand_string}"
          BotHelpers.reply_and_delete_message(msg.channel_id, response, 15000)
        end
    end
  end

  defp handle_command(command_module, msg, args) do
    invoke(command_module, msg, args)
  end
end
